generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  account        Account[] 
  documents      Document[]
  collabOn     collaborator[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String 
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  user User @relation(fields: [userId],references: [id],onDelete:Cascade) 
  
  @@unique([provider,providerAccountId])
  
  }

model Document {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  thumbnail     String?             
  isEveryOne   Boolean?           @default(false)                  
  ownerId       String            @db.ObjectId
  owner         User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  htmlContent   String?
  content    Json
   revisions     Revision[]
   collabUsers collaborator[]
}

model collaborator{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  documentId    String             @db.ObjectId
  document     Document   @relation(fields: [documentId],references: [id])
  userId String @db.ObjectId
  user User  @relation(fields: [userId],references: [id])

}
 

model Revision {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  revisionNumber Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  documentId     String   @db.ObjectId
  document       Document @relation(fields: [documentId], references: [id])
}
